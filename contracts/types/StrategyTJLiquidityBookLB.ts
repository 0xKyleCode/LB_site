/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace ILBStrategy {
  export type StrategyParametersStruct = {
    tokenX: PromiseOrValue<string>;
    tokenY: PromiseOrValue<string>;
    pair: PromiseOrValue<string>;
    binStep: PromiseOrValue<BigNumberish>;
    deltaIds: PromiseOrValue<BigNumberish>[];
    distributionX: PromiseOrValue<BigNumberish>[];
    distributionY: PromiseOrValue<BigNumberish>[];
    idSlippage: PromiseOrValue<BigNumberish>;
  };

  export type StrategyParametersStructOutput = [
    string,
    string,
    string,
    number,
    BigNumber[],
    BigNumber[],
    BigNumber[],
    BigNumber
  ] & {
    tokenX: string;
    tokenY: string;
    pair: string;
    binStep: number;
    deltaIds: BigNumber[];
    distributionX: BigNumber[];
    distributionY: BigNumber[];
    idSlippage: BigNumber;
  };
}

export interface StrategyTJLiquidityBookLBInterface extends utils.Interface {
  functions: {
    "beforeDeposit()": FunctionFragment;
    "binHasXLiquidity(int256[])": FunctionFragment;
    "binHasYLiquidity(int256[])": FunctionFragment;
    "binStep()": FunctionFragment;
    "checkProposedBinLength(int256[],uint256)": FunctionFragment;
    "deltaIds(uint256)": FunctionFragment;
    "distributionX(uint256)": FunctionFragment;
    "distributionY(uint256)": FunctionFragment;
    "earn()": FunctionFragment;
    "executeRebalance(int256[],uint256[],uint256[],uint256)": FunctionFragment;
    "executeRebalance()": FunctionFragment;
    "getActiveBinIds()": FunctionFragment;
    "getBalanceX()": FunctionFragment;
    "getBalanceY()": FunctionFragment;
    "getTotalAmounts()": FunctionFragment;
    "harvest()": FunctionFragment;
    "idSlippage()": FunctionFragment;
    "joeRouter()": FunctionFragment;
    "keeper()": FunctionFragment;
    "lastHarvest()": FunctionFragment;
    "lbPair()": FunctionFragment;
    "lbToken()": FunctionFragment;
    "owner()": FunctionFragment;
    "panic()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "removeLiquidity(uint256)": FunctionFragment;
    "removeTokens(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "retireStrat()": FunctionFragment;
    "rewardsAvailable(uint256[])": FunctionFragment;
    "setJoeRouter(address)": FunctionFragment;
    "setKeeper(address)": FunctionFragment;
    "strategyActiveBins()": FunctionFragment;
    "strategyPositionAtIndex(uint256)": FunctionFragment;
    "strategyPositionNumber()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "tokenX()": FunctionFragment;
    "tokenY()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "vault()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "beforeDeposit"
      | "binHasXLiquidity"
      | "binHasYLiquidity"
      | "binStep"
      | "checkProposedBinLength"
      | "deltaIds"
      | "distributionX"
      | "distributionY"
      | "earn"
      | "executeRebalance(int256[],uint256[],uint256[],uint256)"
      | "executeRebalance()"
      | "getActiveBinIds"
      | "getBalanceX"
      | "getBalanceY"
      | "getTotalAmounts"
      | "harvest"
      | "idSlippage"
      | "joeRouter"
      | "keeper"
      | "lastHarvest"
      | "lbPair"
      | "lbToken"
      | "owner"
      | "panic"
      | "pause"
      | "paused"
      | "removeLiquidity"
      | "removeTokens"
      | "renounceOwnership"
      | "retireStrat"
      | "rewardsAvailable"
      | "setJoeRouter"
      | "setKeeper"
      | "strategyActiveBins"
      | "strategyPositionAtIndex"
      | "strategyPositionNumber"
      | "supportsInterface"
      | "tokenX"
      | "tokenY"
      | "transferOwnership"
      | "unpause"
      | "vault"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "beforeDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "binHasXLiquidity",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "binHasYLiquidity",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(functionFragment: "binStep", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "checkProposedBinLength",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deltaIds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "distributionX",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "distributionY",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "earn", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executeRebalance(int256[],uint256[],uint256[],uint256)",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeRebalance()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveBinIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalanceX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalanceY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalAmounts",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "harvest", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "idSlippage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "joeRouter", values?: undefined): string;
  encodeFunctionData(functionFragment: "keeper", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastHarvest",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lbPair", values?: undefined): string;
  encodeFunctionData(functionFragment: "lbToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "panic", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retireStrat",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsAvailable",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setJoeRouter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setKeeper",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "strategyActiveBins",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "strategyPositionAtIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "strategyPositionNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "tokenX", values?: undefined): string;
  encodeFunctionData(functionFragment: "tokenY", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "beforeDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "binHasXLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "binHasYLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "binStep", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkProposedBinLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deltaIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributionX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributionY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "earn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeRebalance(int256[],uint256[],uint256[],uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeRebalance()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveBinIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBalanceX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBalanceY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "idSlippage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joeRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "keeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastHarvest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lbPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lbToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "panic", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retireStrat",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setJoeRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKeeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "strategyActiveBins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strategyPositionAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strategyPositionNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenX", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;

  events: {
    "AddLiquidity(address,uint256,uint256,uint256)": EventFragment;
    "CollectRewards(uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "FeeTransfer(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Rebalance(uint256,uint256,uint256,uint256)": EventFragment;
    "RemoveLiquidity(address,uint256,uint256)": EventFragment;
    "SetJoeRouter(address)": EventFragment;
    "SetKeeper(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectRewards"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Rebalance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetJoeRouter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetKeeper"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface AddLiquidityEventObject {
  user: string;
  amountX: BigNumber;
  amountY: BigNumber;
  liquidity: BigNumber;
}
export type AddLiquidityEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  AddLiquidityEventObject
>;

export type AddLiquidityEventFilter = TypedEventFilter<AddLiquidityEvent>;

export interface CollectRewardsEventObject {
  lastHarvest: BigNumber;
  amountXBefore: BigNumber;
  amountYBefore: BigNumber;
  amountXAfter: BigNumber;
  amountYAfter: BigNumber;
}
export type CollectRewardsEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  CollectRewardsEventObject
>;

export type CollectRewardsEventFilter = TypedEventFilter<CollectRewardsEvent>;

export interface FeeTransferEventObject {
  amountX: BigNumber;
  amountY: BigNumber;
}
export type FeeTransferEvent = TypedEvent<
  [BigNumber, BigNumber],
  FeeTransferEventObject
>;

export type FeeTransferEventFilter = TypedEventFilter<FeeTransferEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RebalanceEventObject {
  amountXBefore: BigNumber;
  amountYBefore: BigNumber;
  amountXAfter: BigNumber;
  amountYAfter: BigNumber;
}
export type RebalanceEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  RebalanceEventObject
>;

export type RebalanceEventFilter = TypedEventFilter<RebalanceEvent>;

export interface RemoveLiquidityEventObject {
  user: string;
  amountX: BigNumber;
  amountY: BigNumber;
}
export type RemoveLiquidityEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  RemoveLiquidityEventObject
>;

export type RemoveLiquidityEventFilter = TypedEventFilter<RemoveLiquidityEvent>;

export interface SetJoeRouterEventObject {
  joeRouter: string;
}
export type SetJoeRouterEvent = TypedEvent<[string], SetJoeRouterEventObject>;

export type SetJoeRouterEventFilter = TypedEventFilter<SetJoeRouterEvent>;

export interface SetKeeperEventObject {
  keeper: string;
}
export type SetKeeperEvent = TypedEvent<[string], SetKeeperEventObject>;

export type SetKeeperEventFilter = TypedEventFilter<SetKeeperEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface StrategyTJLiquidityBookLB extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StrategyTJLiquidityBookLBInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    beforeDeposit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    binHasXLiquidity(
      _deltaIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[boolean] & { hasXLiquidity: boolean }>;

    binHasYLiquidity(
      _deltaIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[boolean] & { hasYLiquidity: boolean }>;

    binStep(overrides?: CallOverrides): Promise<[number]>;

    checkProposedBinLength(
      proposedDeltas: PromiseOrValue<BigNumberish>[],
      activeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    deltaIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    distributionX(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    distributionY(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    earn(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "executeRebalance(int256[],uint256[],uint256[],uint256)"(
      _deltaIds: PromiseOrValue<BigNumberish>[],
      _distributionX: PromiseOrValue<BigNumberish>[],
      _distributionY: PromiseOrValue<BigNumberish>[],
      _idSlippage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "executeRebalance()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getActiveBinIds(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { activeBinIds: BigNumber[] }>;

    getBalanceX(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBalanceY(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalAmounts(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { totalX: BigNumber; totalY: BigNumber }
    >;

    harvest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    idSlippage(overrides?: CallOverrides): Promise<[BigNumber]>;

    joeRouter(overrides?: CallOverrides): Promise<[string]>;

    keeper(overrides?: CallOverrides): Promise<[string]>;

    lastHarvest(overrides?: CallOverrides): Promise<[BigNumber]>;

    lbPair(overrides?: CallOverrides): Promise<[string]>;

    lbToken(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    panic(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    removeLiquidity(
      denominator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeTokens(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    retireStrat(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardsAvailable(
      _increasingBinIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { rewardsX: BigNumber; rewardsY: BigNumber }
    >;

    setJoeRouter(
      _joeRouter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setKeeper(
      _keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    strategyActiveBins(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { activeBins: BigNumber[] }>;

    strategyPositionAtIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    strategyPositionNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tokenX(overrides?: CallOverrides): Promise<[string]>;

    tokenY(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vault(overrides?: CallOverrides): Promise<[string]>;
  };

  beforeDeposit(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  binHasXLiquidity(
    _deltaIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  binHasYLiquidity(
    _deltaIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  binStep(overrides?: CallOverrides): Promise<number>;

  checkProposedBinLength(
    proposedDeltas: PromiseOrValue<BigNumberish>[],
    activeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deltaIds(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  distributionX(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  distributionY(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  earn(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "executeRebalance(int256[],uint256[],uint256[],uint256)"(
    _deltaIds: PromiseOrValue<BigNumberish>[],
    _distributionX: PromiseOrValue<BigNumberish>[],
    _distributionY: PromiseOrValue<BigNumberish>[],
    _idSlippage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "executeRebalance()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getActiveBinIds(overrides?: CallOverrides): Promise<BigNumber[]>;

  getBalanceX(overrides?: CallOverrides): Promise<BigNumber>;

  getBalanceY(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalAmounts(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { totalX: BigNumber; totalY: BigNumber }>;

  harvest(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  idSlippage(overrides?: CallOverrides): Promise<BigNumber>;

  joeRouter(overrides?: CallOverrides): Promise<string>;

  keeper(overrides?: CallOverrides): Promise<string>;

  lastHarvest(overrides?: CallOverrides): Promise<BigNumber>;

  lbPair(overrides?: CallOverrides): Promise<string>;

  lbToken(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  panic(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  removeLiquidity(
    denominator: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeTokens(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  retireStrat(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardsAvailable(
    _increasingBinIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { rewardsX: BigNumber; rewardsY: BigNumber }
  >;

  setJoeRouter(
    _joeRouter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setKeeper(
    _keeper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  strategyActiveBins(overrides?: CallOverrides): Promise<BigNumber[]>;

  strategyPositionAtIndex(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  strategyPositionNumber(overrides?: CallOverrides): Promise<BigNumber>;

  supportsInterface(
    _interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokenX(overrides?: CallOverrides): Promise<string>;

  tokenY(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    beforeDeposit(overrides?: CallOverrides): Promise<void>;

    binHasXLiquidity(
      _deltaIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    binHasYLiquidity(
      _deltaIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    binStep(overrides?: CallOverrides): Promise<number>;

    checkProposedBinLength(
      proposedDeltas: PromiseOrValue<BigNumberish>[],
      activeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deltaIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributionX(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributionY(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    earn(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountX: BigNumber; amountY: BigNumber }
    >;

    "executeRebalance(int256[],uint256[],uint256[],uint256)"(
      _deltaIds: PromiseOrValue<BigNumberish>[],
      _distributionX: PromiseOrValue<BigNumberish>[],
      _distributionY: PromiseOrValue<BigNumberish>[],
      _idSlippage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountX: BigNumber; amountY: BigNumber }
    >;

    "executeRebalance()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountX: BigNumber; amountY: BigNumber }
    >;

    getActiveBinIds(overrides?: CallOverrides): Promise<BigNumber[]>;

    getBalanceX(overrides?: CallOverrides): Promise<BigNumber>;

    getBalanceY(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalAmounts(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { totalX: BigNumber; totalY: BigNumber }
    >;

    harvest(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amountXReceived: BigNumber;
        amountYReceived: BigNumber;
      }
    >;

    idSlippage(overrides?: CallOverrides): Promise<BigNumber>;

    joeRouter(overrides?: CallOverrides): Promise<string>;

    keeper(overrides?: CallOverrides): Promise<string>;

    lastHarvest(overrides?: CallOverrides): Promise<BigNumber>;

    lbPair(overrides?: CallOverrides): Promise<string>;

    lbToken(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    panic(overrides?: CallOverrides): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    removeLiquidity(
      denominator: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountX: BigNumber; amountY: BigNumber }
    >;

    removeTokens(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    retireStrat(overrides?: CallOverrides): Promise<void>;

    rewardsAvailable(
      _increasingBinIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { rewardsX: BigNumber; rewardsY: BigNumber }
    >;

    setJoeRouter(
      _joeRouter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setKeeper(
      _keeper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    strategyActiveBins(overrides?: CallOverrides): Promise<BigNumber[]>;

    strategyPositionAtIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    strategyPositionNumber(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokenX(overrides?: CallOverrides): Promise<string>;

    tokenY(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    vault(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AddLiquidity(address,uint256,uint256,uint256)"(
      user?: null,
      amountX?: null,
      amountY?: null,
      liquidity?: null
    ): AddLiquidityEventFilter;
    AddLiquidity(
      user?: null,
      amountX?: null,
      amountY?: null,
      liquidity?: null
    ): AddLiquidityEventFilter;

    "CollectRewards(uint256,uint256,uint256,uint256,uint256)"(
      lastHarvest?: null,
      amountXBefore?: null,
      amountYBefore?: null,
      amountXAfter?: null,
      amountYAfter?: null
    ): CollectRewardsEventFilter;
    CollectRewards(
      lastHarvest?: null,
      amountXBefore?: null,
      amountYBefore?: null,
      amountXAfter?: null,
      amountYAfter?: null
    ): CollectRewardsEventFilter;

    "FeeTransfer(uint256,uint256)"(
      amountX?: null,
      amountY?: null
    ): FeeTransferEventFilter;
    FeeTransfer(amountX?: null, amountY?: null): FeeTransferEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Rebalance(uint256,uint256,uint256,uint256)"(
      amountXBefore?: null,
      amountYBefore?: null,
      amountXAfter?: null,
      amountYAfter?: null
    ): RebalanceEventFilter;
    Rebalance(
      amountXBefore?: null,
      amountYBefore?: null,
      amountXAfter?: null,
      amountYAfter?: null
    ): RebalanceEventFilter;

    "RemoveLiquidity(address,uint256,uint256)"(
      user?: null,
      amountX?: null,
      amountY?: null
    ): RemoveLiquidityEventFilter;
    RemoveLiquidity(
      user?: null,
      amountX?: null,
      amountY?: null
    ): RemoveLiquidityEventFilter;

    "SetJoeRouter(address)"(joeRouter?: null): SetJoeRouterEventFilter;
    SetJoeRouter(joeRouter?: null): SetJoeRouterEventFilter;

    "SetKeeper(address)"(keeper?: null): SetKeeperEventFilter;
    SetKeeper(keeper?: null): SetKeeperEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    beforeDeposit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    binHasXLiquidity(
      _deltaIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    binHasYLiquidity(
      _deltaIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    binStep(overrides?: CallOverrides): Promise<BigNumber>;

    checkProposedBinLength(
      proposedDeltas: PromiseOrValue<BigNumberish>[],
      activeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deltaIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributionX(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributionY(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    earn(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "executeRebalance(int256[],uint256[],uint256[],uint256)"(
      _deltaIds: PromiseOrValue<BigNumberish>[],
      _distributionX: PromiseOrValue<BigNumberish>[],
      _distributionY: PromiseOrValue<BigNumberish>[],
      _idSlippage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "executeRebalance()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getActiveBinIds(overrides?: CallOverrides): Promise<BigNumber>;

    getBalanceX(overrides?: CallOverrides): Promise<BigNumber>;

    getBalanceY(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalAmounts(overrides?: CallOverrides): Promise<BigNumber>;

    harvest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    idSlippage(overrides?: CallOverrides): Promise<BigNumber>;

    joeRouter(overrides?: CallOverrides): Promise<BigNumber>;

    keeper(overrides?: CallOverrides): Promise<BigNumber>;

    lastHarvest(overrides?: CallOverrides): Promise<BigNumber>;

    lbPair(overrides?: CallOverrides): Promise<BigNumber>;

    lbToken(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    panic(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    removeLiquidity(
      denominator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeTokens(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    retireStrat(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardsAvailable(
      _increasingBinIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setJoeRouter(
      _joeRouter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setKeeper(
      _keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    strategyActiveBins(overrides?: CallOverrides): Promise<BigNumber>;

    strategyPositionAtIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    strategyPositionNumber(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenX(overrides?: CallOverrides): Promise<BigNumber>;

    tokenY(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    beforeDeposit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    binHasXLiquidity(
      _deltaIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    binHasYLiquidity(
      _deltaIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    binStep(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkProposedBinLength(
      proposedDeltas: PromiseOrValue<BigNumberish>[],
      activeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deltaIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    distributionX(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    distributionY(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    earn(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "executeRebalance(int256[],uint256[],uint256[],uint256)"(
      _deltaIds: PromiseOrValue<BigNumberish>[],
      _distributionX: PromiseOrValue<BigNumberish>[],
      _distributionY: PromiseOrValue<BigNumberish>[],
      _idSlippage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "executeRebalance()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getActiveBinIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBalanceX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBalanceY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalAmounts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    idSlippage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    joeRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    keeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastHarvest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lbPair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lbToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    panic(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeLiquidity(
      denominator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeTokens(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    retireStrat(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardsAvailable(
      _increasingBinIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setJoeRouter(
      _joeRouter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setKeeper(
      _keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    strategyActiveBins(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    strategyPositionAtIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    strategyPositionNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
